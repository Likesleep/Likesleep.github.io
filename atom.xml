<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ziyer&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://likesleep.github.io/"/>
  <updated>2020-08-08T04:34:33.241Z</updated>
  <id>http://likesleep.github.io/</id>
  
  <author>
    <name>Ziyer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1045 快速排序</title>
    <link href="http://likesleep.github.io/2020/08/07/2019-PAT-winter-5/"/>
    <id>http://likesleep.github.io/2020/08/07/2019-PAT-winter-5/</id>
    <published>2020-08-06T16:00:00.000Z</published>
    <updated>2020-08-08T04:34:33.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-5-区块反转-25分"><a href="#7-5-区块反转-25分" class="headerlink" title="7-5 区块反转 (25分)"></a>7-5 区块反转 (25分)</h2><blockquote><p>给定一个单链表 L，我们将每 K 个结点看成一个区块（链表最后若不足 K 个结点，也看成一个区块），请编写程序将 L 中所有区块的链接反转。例如：给定 L 为 1→2→3→4→5→6→7→8，K 为 3，则输出应该为 7→8→4→5→6→1→2→3。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤10^5^)、以及正整数 K (≤N)，即区块的大小。结点的地址是 5 位非负整数，NULL 地址用 − 表示。</p><p>接下来有 N 行，每行格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Address Data Next</span><br></pre></td></tr></table></figure><p>其中 <code>Address</code> 是结点地址，<code>Data</code> 是该结点保存的整数数据，<code>Next</code> 是下一结点的地址。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">00100 8 3</span><br><span class="line">71120 7 88666</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 71120</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">88666 8 -1</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">71120 7 88666</span><br><span class="line">88666 8 00000</span><br><span class="line">00000 4 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 00100</span><br><span class="line">00100 1 12309</span><br><span class="line">12309 2 33218</span><br><span class="line">33218 3 -1</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vector&lt;int&gt; v[group];</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> addr, data, next;</span><br><span class="line"><span class="keyword">int</span> order;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> start, n, k; <span class="built_in">cin</span> &gt;&gt; start &gt;&gt; n &gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">node[temp].addr = temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;node[temp].data, &amp;node[temp].next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> group = n / k;</span><br><span class="line"><span class="keyword">if</span>(n % k != <span class="number">0</span>)group++;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[group];</span><br><span class="line"><span class="keyword">int</span>  cnt = <span class="number">0</span>,pos = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(start != <span class="number">-1</span>)&#123;</span><br><span class="line">v[pos].push_back(start);</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(cnt == k)&#123;</span><br><span class="line">pos++;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">start = node[start].next;</span><br><span class="line">&#125;</span><br><span class="line">reverse(v, v + group);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; group - <span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j != v[i].<span class="built_in">size</span>() - <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,v[i][j],node[v[i][j]].data, v[i][j + <span class="number">1</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,v[i][j], node[v[i][j]].data, v[i + <span class="number">1</span>][<span class="number">0</span>]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> last = group - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[last].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i != v[last].<span class="built_in">size</span>() - <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,v[last][i], node[v[last][i]].data, v[last][i + <span class="number">1</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%05d %d -1"</span>,v[last][i], node[v[last][i]].data); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vector&lt;Node&gt;v[group];</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> addr, data, next;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> start, n, k; <span class="built_in">cin</span> &gt;&gt; start &gt;&gt; n &gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">node[temp].addr = temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;node[temp].data, &amp;node[temp].next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> group = n / k;</span><br><span class="line"><span class="keyword">if</span>(n % k != <span class="number">0</span>)group++;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt;v[group];</span><br><span class="line"><span class="keyword">int</span>  cnt = <span class="number">0</span>,pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(start != <span class="number">-1</span>)&#123;</span><br><span class="line">v[pos].push_back(node[start]);</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(cnt == k)&#123;</span><br><span class="line">pos++;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">start = node[start].next;</span><br><span class="line">&#125;</span><br><span class="line">reverse(v, v + group);</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; group - <span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j != v[i].<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,v[i][j].addr, v[i][j].data, v[i][j].next);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,v[i][j].addr, v[i][j].data, v[i + <span class="number">1</span>][<span class="number">0</span>].addr); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> last = group - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[last].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i != v[last].<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>,v[last][i].addr, v[last][i].data, v[last][i].next);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%05d %d -1"</span>,v[last][i].addr, v[last][i].data); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;7-5-区块反转-25分&quot;&gt;&lt;a href=&quot;#7-5-区块反转-25分&quot; class=&quot;headerlink&quot; title=&quot;7-5 区块反转 (25分)&quot;&gt;&lt;/a&gt;7-5 区块反转 (25分)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个单链表 L，我们将
      
    
    </summary>
    
    
      <category term="PAT" scheme="http://Likesleep.github.io/categories/PAT/"/>
    
      <category term="basic" scheme="http://Likesleep.github.io/categories/PAT/basic/"/>
    
    
      <category term="c++" scheme="http://Likesleep.github.io/tags/c/"/>
    
      <category term="c" scheme="http://Likesleep.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>STL用法</title>
    <link href="http://likesleep.github.io/2020/08/07/STL%E7%94%A8%E6%B3%95/"/>
    <id>http://likesleep.github.io/2020/08/07/STL%E7%94%A8%E6%B3%95/</id>
    <published>2020-08-06T16:00:00.000Z</published>
    <updated>2020-08-07T13:56:01.382Z</updated>
    
    <content type="html"><![CDATA[<p>fcin和cout(输入和输出)    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"hello world"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'a'</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>升序、降序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;升序(值)：按照数据从低到高排列</span><br><span class="line">int greater[4]&#x3D;&#123;20,40,60,100&#125;;</span><br><span class="line">&#x2F;&#x2F;降序(值)：按照数据从高到低排列</span><br><span class="line">int less[4]&#x3D;&#123;100,80,60,40&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="1-string的用法"><a href="#1-string的用法" class="headerlink" title="1.string的用法(*)"></a>1.string的用法(*)</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="1-1-定义与连接"><a href="#1-1-定义与连接" class="headerlink" title="1.1    定义与连接"></a>1.1    定义与连接</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"hello world123"</span>;</span><br><span class="line"><span class="built_in">string</span> s1=s;</span><br><span class="line"><span class="built_in">string</span> s2=s+s1;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s2;</span><br></pre></td></tr></table></figure><h5 id="1-2-s-length"><a href="#1-2-s-length" class="headerlink" title="1.2    ==s.length()=="></a>1.2    ==s.length()==</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//s的长度获取,有几个字符就是长度多少</span></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);<span class="comment">//读取一行的字符串(包括空格)</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.length();</span><br></pre></td></tr></table></figure><h5 id="1-3-substr-拓展"><a href="#1-3-substr-拓展" class="headerlink" title="1.3    ==substr()==(拓展)"></a>1.3    ==substr()==(拓展)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作用是截取某个字符串中的字串,字符从下标从0开始(拓展)</span></span><br><span class="line"><span class="built_in">string</span> s1=s.substr(<span class="number">4</span>);<span class="comment">//表示从下标4开始截取字符</span></span><br><span class="line"><span class="built_in">string</span> s2=s.substr(<span class="number">5</span>,<span class="number">3</span>);<span class="comment">//表示从下标5开始截取3个字符</span></span><br></pre></td></tr></table></figure><p>思考s.substr(3,100)、s.substr(5,-1)、s.substr(1,-1)、s.substr(-1,3)</p><h5 id="1-4-运算符"><a href="#1-4-运算符" class="headerlink" title="1.4+=运算符"></a>1.4+=运算符</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于字符以及字符串有效，数字会转换为ASCII对应的符号或字符</span></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">s+=<span class="string">"hello"</span>;</span><br><span class="line">s+=<span class="string">" world"</span>;</span><br><span class="line">s+=<span class="string">'4'</span>; </span><br><span class="line">s+=<span class="number">10</span>;<span class="comment">//换行符的ASCII码 </span></span><br><span class="line">s+=<span class="number">65</span>;<span class="comment">//A的ASCII码 </span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">s+=(a+<span class="string">'0'</span>);<span class="comment">//(将整型a转换为字符)(a+'0')(*)</span></span><br><span class="line"><span class="comment">//(a+'0')(将整型转换为字符)</span></span><br><span class="line"><span class="comment">//(a-'0')(将字符转换为整型)</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;</span><br></pre></td></tr></table></figure><blockquote><p>打印结果：</p><p>hello world4                  </p><p> A4   </p></blockquote><h5 id="1-5-s-insert"><a href="#1-5-s-insert" class="headerlink" title="1.5    ==s.insert()=="></a>1.5    ==s.insert()==</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"str s"</span>;</span><br><span class="line"><span class="built_in">string</span> s1=<span class="string">"hello"</span>;</span><br><span class="line">s.insert(<span class="number">4</span>,s1);<span class="comment">//从下标4开始插入字符串s1</span></span><br></pre></td></tr></table></figure><h5 id="1-6-s-erase"><a href="#1-6-s-erase" class="headerlink" title="1.6    ==s.erase()=="></a>1.6    ==s.erase()==</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序(头文件添加algorithm)</span></span><br><span class="line"><span class="built_in">string</span> s=<span class="string">"78541"</span>;</span><br><span class="line">sort(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">s.erase(s.<span class="built_in">begin</span>());<span class="comment">//擦去第一个元素</span></span><br><span class="line">s.erase(--s.<span class="built_in">end</span>());<span class="comment">//擦去最后一个元素,注意s.end()指向容器的最后一个元素的后一个位置</span></span><br></pre></td></tr></table></figure><p>1.7    ==s.find()、string::npos==</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="comment">//可以写成s2.npos也可以写成string::npos</span></span><br><span class="line">        <span class="comment">//如果是==s2.npos表示到结束位也没有找到</span></span><br><span class="line">        <span class="comment">//而如果是!=s2.npos表示找到</span></span><br><span class="line">        <span class="keyword">if</span>(s2.<span class="built_in">find</span>(s1[i])==s2.npos&amp;&amp;ans.<span class="built_in">find</span>(<span class="built_in">toupper</span>(s1[i]))==<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">ans+=<span class="built_in">toupper</span>(s1[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> tmp:ans)<span class="built_in">cout</span>&lt;&lt;tmp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-s-end"><a href="#1-8-s-end" class="headerlink" title="1.8    ==s.end()=="></a>1.8    ==s.end()==</h5><h5 id="1-8-1-循环方式"><a href="#1-8-1-循环方式" class="headerlink" title="1.8.1    循环方式(*)"></a>1.8.1    循环方式(*)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指向容器的最后一个元素的后一个位置</span></span><br><span class="line"><span class="built_in">string</span> s=<span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)<span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::iterator it =s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++)<span class="built_in">cout</span>&lt;&lt;*it;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++)<span class="built_in">cout</span>&lt;&lt;*it;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:s)<span class="built_in">cout</span>&lt;&lt;x;</span><br></pre></td></tr></table></figure><h5 id="1-9-stoi、stod的使用"><a href="#1-9-stoi、stod的使用" class="headerlink" title="1.9    stoi、stod的使用"></a>1.9    stoi、stod的使用</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"123456"</span>;</span><br><span class="line"><span class="keyword">int</span> i=stoi(s);<span class="comment">//需要多定义一个i来接收s字符串的转换</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">s=<span class="string">"123.44"</span>;</span><br><span class="line"><span class="keyword">double</span> d=stod(s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;d;</span><br></pre></td></tr></table></figure><h5 id="1-10-to-string的使用"><a href="#1-10-to-string的使用" class="headerlink" title="1.10    to_string的使用"></a>1.10    to_string的使用</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = to_string(<span class="number">123</span>); <span class="comment">// 将123这个数字转成字符串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = to_string(<span class="number">4.5</span>); <span class="comment">// 将4.5这个数字转成字符串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 + s2 &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 将s1和s2两个字符串拼接起来并输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, (s1 + s2).c_str()); <span class="comment">// 如果想⽤printf输出string，得加⼀个.c_str()</span></span><br></pre></td></tr></table></figure><blockquote><p>打印结果：</p><p>123                                   </p><p>4.500000         </p><p>1234.500000                                           </p><p>1234.500000</p></blockquote><h5 id="1-11-sstream的使用-拓展"><a href="#1-11-sstream的使用-拓展" class="headerlink" title="1.11    sstream的使用(拓展)"></a>1.11    sstream的使用(拓展)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////无法识别空格</span></span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line"><span class="built_in">string</span> s=<span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">string</span> <span class="built_in">print</span>;</span><br><span class="line">ss&lt;&lt;s;</span><br><span class="line">ss&gt;&gt;<span class="built_in">print</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">print</span>;</span><br></pre></td></tr></table></figure><blockquote><p>打印结果：</p><p>hello</p></blockquote><h5 id="1-12-sprintf的使用-拓展"><a href="#1-12-sprintf的使用-拓展" class="headerlink" title="1.12    sprintf的使用(拓展)"></a>1.12    sprintf的使用(拓展)</h5><hr><h3 id="2-vector的用法"><a href="#2-vector的用法" class="headerlink" title="2.vector的用法(*)"></a>2.vector的用法(*)</h3><h4 id="矢量数组"><a href="#矢量数组" class="headerlink" title="矢量数组"></a>矢量数组</h4><h5 id="2-1-定义-拓展-二维或多维数组"><a href="#2-1-定义-拓展-二维或多维数组" class="headerlink" title="2.1    定义(拓展:二维或多维数组)"></a>2.1    定义(拓展:二维或多维数组)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(要加头文件vector)</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;<span class="title">v2</span><span class="params">(<span class="number">4</span>)</span></span>;<span class="comment">//定义一个大小为4的vector,初值为0</span></span><br><span class="line"><span class="comment">//定义一个大小为4的vector,并将所有元素初始化大小为6(*)</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;<span class="title">v3</span><span class="params">(<span class="number">4</span>,<span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v4&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">//用[]或at获取元素</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v4[<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//获取索引为1的元素的值</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v4.at(<span class="number">3</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//用at方法获取索引为3的元素的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:v4)<span class="built_in">cout</span>&lt;&lt;x;</span><br><span class="line"><span class="comment">//创建二维数组并分配个数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;v;</span><br><span class="line">v.resize(n,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m));</span><br></pre></td></tr></table></figure><h5 id="2-2-push-back"><a href="#2-2-push-back" class="headerlink" title="2.2    ==push_back()=="></a>2.2    ==push_back()==</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*如果for循环的判断中是v.size()</span></span><br><span class="line"><span class="comment">那么不要再循环中用push_back(),会造成死循环*/</span></span><br><span class="line">v.push_back(<span class="number">4</span>);<span class="comment">//在容器末尾添加元素</span></span><br></pre></td></tr></table></figure><h5 id="2-3-resize"><a href="#2-3-resize" class="headerlink" title="2.3    ==resize()=="></a>2.3    ==resize()==</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.resize(<span class="number">10</span>);<span class="comment">//对vector重置大小，不赋值默认值为0</span></span><br></pre></td></tr></table></figure><h5 id="2-4-erase"><a href="#2-4-erase" class="headerlink" title="2.4    ==erase()=="></a>2.4    ==erase()==</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除元素，复杂度为O(n)</span></span><br><span class="line">v.erase(v.<span class="built_in">begin</span>());<span class="comment">//删除第一个元素</span></span><br><span class="line">v.erase(--v.<span class="built_in">end</span>());<span class="comment">//删除最后一个元素</span></span><br></pre></td></tr></table></figure><h5 id="2-5-获取第一个元素，获取最后一个元素"><a href="#2-5-获取第一个元素，获取最后一个元素" class="headerlink" title="2.5    获取第一个元素，获取最后一个元素"></a>2.5    获取第一个元素，获取最后一个元素</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取第一个元素</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*v.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v.front();</span><br><span class="line">获取最后一个元素</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v[v.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*--v.<span class="built_in">end</span>();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v.back();</span><br></pre></td></tr></table></figure><h5 id="2-6-排序"><a href="#2-6-排序" class="headerlink" title="2.6    排序"></a>2.6    排序</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果写了cmp的比较方式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="comment">//第三个参数为比较器，不写默认为升序; </span></span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()); </span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),less&lt;<span class="keyword">int</span>&gt;());<span class="comment">//从小到大 </span></span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),greater&lt;<span class="keyword">int</span>&gt;());<span class="comment">//从大到小 </span></span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),cmp); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:v)<span class="built_in">cout</span>&lt;&lt;x;</span><br></pre></td></tr></table></figure><h5 id="2-7-遍历vector"><a href="#2-7-遍历vector" class="headerlink" title="2.7    遍历vector"></a>2.7    遍历vector</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="comment">//for循环遍历,最后一个为v.size-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;v[i];</span><br><span class="line">    <span class="keyword">if</span>(i==v.<span class="built_in">size</span>()<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器遍历，vector&lt;int&gt;::iterator it=v.begin()</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++)<span class="built_in">cout</span>&lt;&lt;*it;</span><br><span class="line"><span class="comment">//迭代器简化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++)<span class="built_in">cout</span>&lt;&lt;*it;</span><br><span class="line"><span class="comment">//c++11特性:基于范围的for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:v)<span class="built_in">cout</span>&lt;&lt;x;</span><br></pre></td></tr></table></figure><hr><h3 id="3-stack的用法"><a href="#3-stack的用法" class="headerlink" title="3.stack的用法(*)"></a>3.stack的用法(*)</h3><h4 id="栈-先进后出"><a href="#栈-先进后出" class="headerlink" title="栈:先进后出"></a>栈:先进后出</h4><h5 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1    定义"></a>3.1    定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件要加stack</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br></pre></td></tr></table></figure><h5 id="3-2-push-、pop-、top"><a href="#3-2-push-、pop-、top" class="headerlink" title="3.2    ==push()、pop()、top()=="></a>3.2    ==push()、pop()、top()==</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.push(<span class="number">0</span>);<span class="comment">//入栈一个元素</span></span><br><span class="line">s.push(<span class="number">4</span>);<span class="comment">//入栈一个元素</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.top()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//去栈顶元素</span></span><br><span class="line">s.pop();<span class="comment">//弹出一个元素</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.top();</span><br></pre></td></tr></table></figure><h5 id="3-3-字符串转数字"><a href="#3-3-字符串转数字" class="headerlink" title="3.3    字符串转数字"></a>3.3    字符串转数字</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line"><span class="built_in">string</span> s=<span class="string">"1234"</span>;</span><br><span class="line">ss&lt;&lt;s;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">ss&gt;&gt;i;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="built_in">string</span> s=<span class="string">"1234"</span>;</span><br><span class="line"><span class="keyword">int</span> i=stoi(s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i;</span><br></pre></td></tr></table></figure><h5 id="3-4-数字转字符串"><a href="#3-4-数字转字符串" class="headerlink" title="3.4    数字转字符串"></a>3.4    数字转字符串</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1234</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss&lt;&lt;a;</span><br><span class="line">ss&gt;&gt;s;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1234</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;to_string(a);</span><br></pre></td></tr></table></figure><hr><h3 id="4-queue的用法"><a href="#4-queue的用法" class="headerlink" title="4.queue的用法"></a>4.queue的用法</h3><h4 id="队列-先进先出"><a href="#队列-先进先出" class="headerlink" title="队列:先进先出"></a>队列:先进先出</h4><h5 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1    定义"></a>4.1    定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要加头文件queue</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br></pre></td></tr></table></figure><h5 id="4-2-push-、pop-、front-、back"><a href="#4-2-push-、pop-、front-、back" class="headerlink" title="4.2    ==push()、pop()、front()、back()=="></a>4.2    ==push()、pop()、front()、back()==</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.push(<span class="number">5</span>);</span><br><span class="line">q.push(<span class="number">6</span>);</span><br><span class="line">q.push(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;q.front()&lt;&lt;q.back();</span><br></pre></td></tr></table></figure><hr><h3 id="5-map的用法"><a href="#5-map的用法" class="headerlink" title="5.map的用法(*)"></a>5.map的用法(*)</h3><h4 id="映射-lt-键-值-gt"><a href="#映射-lt-键-值-gt" class="headerlink" title="映射&lt;键,值&gt;"></a>映射&lt;键,值&gt;</h4><h5 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1    定义"></a>5.1    定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件要加map</span></span><br><span class="line"><span class="comment">//map(有序，底层是树状结构，按照键的大小排序)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;m;</span><br><span class="line">m[<span class="number">7</span>]=<span class="number">10</span>;</span><br><span class="line">m[<span class="number">6</span>]=<span class="number">3</span>;</span><br><span class="line">m[<span class="number">5</span>]=<span class="number">4</span>;</span><br><span class="line"><span class="comment">//注意auto mp后变成了成员要用"."运算符</span></span><br><span class="line"><span class="comment">//键用it-&gt;first获取，值用it-&gt;second获取</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=m.<span class="built_in">begin</span>();it!=m.<span class="built_in">end</span>();it++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> mp:m)<span class="built_in">cout</span>&lt;&lt;mp.first&lt;&lt;<span class="string">" "</span>&lt;&lt;mp.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unordered_map(无序，底层是哈希结构)</span></span><br><span class="line"><span class="comment">/*因为unordered_map不能直接用sort排序，所以将它压进vector中*/</span>(*)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//pair:一双，一对,可以理解为对子,这里pair依旧是用.运算符</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; a,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.first&gt;b.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;m;</span><br><span class="line">m[<span class="number">7</span>]=<span class="number">10</span>;</span><br><span class="line">m[<span class="number">6</span>]=<span class="number">3</span>;</span><br><span class="line">m[<span class="number">5</span>]=<span class="number">4</span>;</span><br><span class="line">vector&lt;pair&lt;int,int&gt;&gt;v(m.begin(),m.end());</span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=m.<span class="built_in">begin</span>();it!=m.<span class="built_in">end</span>();it++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="string">" "</span>&lt;&lt;it-&gt;second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> mp:v)<span class="built_in">cout</span>&lt;&lt;mp.first&lt;&lt;<span class="string">" "</span>&lt;&lt;mp.second&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="6-set的用法"><a href="#6-set的用法" class="headerlink" title="6.set的用法(*)"></a>6.set的用法(*)</h3><h4 id="集合-应用计数、去重"><a href="#集合-应用计数、去重" class="headerlink" title="集合(应用计数、去重)"></a>集合(应用计数、去重)</h4><h5 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1    定义"></a>6.1    定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件要加set</span></span><br><span class="line"><span class="comment">//set(有序,底层为树状结构)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s; </span><br><span class="line">s.insert(<span class="number">1</span>); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(s.<span class="built_in">begin</span>()) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    s.insert(i); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找集合s里面的值,如果结果等于s.end()表示未找到(返回1表示找到,0表示未找到)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; (s.<span class="built_in">find</span>(<span class="number">2</span>) != s.<span class="built_in">end</span>()) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (s.<span class="built_in">find</span>(<span class="number">10</span>) != s.<span class="built_in">end</span>()) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">s.erase(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (s.<span class="built_in">find</span>(<span class="number">1</span>) != s.<span class="built_in">end</span>()) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> tmp:s)<span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="string">" "</span>;</span><br></pre></td></tr></table></figure><blockquote><p>打印结果:</p><p>1<br>0 1 2 3 4 5<br>1<br>0<br>0 2 3 4 5<br>0<br>0 2 3 4 5</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件要加unordered_set</span></span><br><span class="line"><span class="comment">//unordered_set(无序,底层为哈希结构[头插])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;us;</span><br><span class="line">us.insert(<span class="number">3</span>);</span><br><span class="line">us.insert(<span class="number">9</span>);</span><br><span class="line">us.insert(<span class="number">4</span>);</span><br><span class="line">us.insert(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;us.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=us.<span class="built_in">begin</span>();it!=us.<span class="built_in">end</span>();it++)<span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> tmp:us)<span class="built_in">cout</span>&lt;&lt;ctmp&lt;&lt;<span class="string">" "</span>;</span><br></pre></td></tr></table></figure><blockquote><p>打印结果:</p><p>4                                                                                                                  </p><p>1 4 9 3                                    </p><p>1 4 9 3 </p></blockquote><hr><h3 id="7-deque的用法"><a href="#7-deque的用法" class="headerlink" title="7.deque的用法"></a>7.deque的用法</h3><h4 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h4><h5 id="7-1-定义"><a href="#7-1-定义" class="headerlink" title="7.1    定义"></a>7.1    定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件要加deque</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;d;</span><br><span class="line"><span class="comment">//4 9 1 2</span></span><br><span class="line">d.push_back(<span class="number">1</span>);</span><br><span class="line">d.push_back(<span class="number">2</span>);</span><br><span class="line">d.push_front(<span class="number">9</span>);</span><br><span class="line">d.push_front(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//记住greater&lt;int&gt;()表示从大到小排列</span></span><br><span class="line">sort(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>(),greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"><span class="comment">//9 4 2 1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> tmp:d)<span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="string">" "</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="8-list的用法"><a href="#8-list的用法" class="headerlink" title="8.list的用法"></a>8.list的用法</h3><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><h5 id="8-1-定义"><a href="#8-1-定义" class="headerlink" title="8.1    定义"></a>8.1    定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件要加list</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="comment">//2 10 5 6 9</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;li;</span><br><span class="line">li.push_back(<span class="number">6</span>);</span><br><span class="line">li.push_front(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//emplace同样是插入的意思 </span></span><br><span class="line">li.emplace_back(<span class="number">9</span>);</span><br><span class="line">li.emplace_front(<span class="number">10</span>);</span><br><span class="line">li.insert(li.<span class="built_in">begin</span>(),<span class="number">2</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> tmp:li)<span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="string">" "</span>;</span><br></pre></td></tr></table></figure><hr><ul><li>reverse的用法</li><li>pair</li><li>memset</li><li>hash[128]、hash[256]</li><li>cctype里的函数</li><li>string里的函数</li><li>cmath里的函数</li><li>algorithm里的函数</li><li>bitset的使用和用法</li><li>two pointers如何理解()</li><li><del>如何在dev c++里进行调试</del></li><li>字符串append(只能往字符串后面追加字符)，如果要在前方补零,要用”+=”(并且要注意哪个字符串在前)</li><li>算法笔记里面有而我没有记录的点</li><li>行首尾不得有空格</li><li>cin不支持直接录入空格(cin&gt;&gt;” “)(这样是行不通的)[如果要输入空格使用cin.ignore()]</li><li>大整数</li><li>对大数进行取模</li><li>结构体数组初始化</li></ul><hr><h3 id="9-devc-的调试"><a href="#9-devc-的调试" class="headerlink" title="9.devc++的调试"></a>9.devc++的调试</h3><p>如果选择调试后软件闪退，重新打开软件，工具-&gt;编译器选项-&gt;代码生成/优化-&gt;连接器-&gt;产生调试信息(点为YES)</p><blockquote><p>下一步：执行当前函数的下一条语句。<br>单步进入：如果有函数，会进入到函数内部。 </p></blockquote><ul><li>bug:cout&lt;&lt;endl;(点击下一步时如果这样子写调试时会卡住)改成cout&lt;&lt;’\n’调试就不会卡住</li><li>bug:不能查看stl容器里的数据(可以直接输出数据来查看数据)</li></ul><blockquote><p>getchar()：</p><p>从缓冲区读走一个字符，相当于清除缓冲区</p><p>getchar()是在输入缓冲区顺序读入一个字符(包括空格、回车和Tab)</p><p> getchar()函数执行一次会从键盘缓冲区(如果有内容就读取，没有内容就等待用户输入并以回车结束，回车相当于加上一个换行符\n)顺序读取一个字符并返回此ASCII码，举个例子:当我们调用一次getchar()时，然后输入abc并回车，此时abc和\n才一起送入了键盘缓冲区，总共就是4个字符。而此时getchar()由于只运行了一次，所以取到的是a，剩下缓冲区的字符就是bc\n 源程序里 </p><p> getchar()是stdio.h中的库函数，它的作用是从stdin流中读入一个字符，也就是说，如果stdin有数据的话不用输入它就可以直接读取了，第一次getchar()时，确实需要人工的输入，但是如果你输了多个字符，以后的getchar()再执行时就会直接从缓冲区中读取了。实际上是输入设备-&gt;内存缓冲区-&gt;程序getchar你按的键是放进缓冲区了,然后供程序getchar </p></blockquote><blockquote><p>当你按下回车键的时候后面又是接收字符的scanf或者是getchar他们由于要读取缓冲区里面的内容就会把这个回车都取到，而回车又恰恰是结束读取，所以就会直接结束！而如果你的后面的scanf不是读取字符比如你读取的是%d，那就不存在问题。还有就是如果你的下一次读取是字符串也是没关系的，因为在%s也是会过滤掉前面的空格回车的。为什么不存在问题？那是因为整型输入会忽略之前的空格、回车，并且以之后的空格、回车作为输入整型结束的标志。</p></blockquote><p>bool数组的赋值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一般情况，对于<span class="keyword">bool</span>数组的初始化都是设为<span class="literal">false</span>,即:<span class="number">0</span></span><br><span class="line">之所以这样做的原因，数组其他部分的自动赋值会默认为<span class="number">0</span>,所以,想要初始化全部为<span class="literal">true</span>,使用</span><br><span class="line"><span class="keyword">bool</span> isTrue[N] = &#123;<span class="literal">true</span>&#125;;<span class="comment">//会出错</span></span><br><span class="line"><span class="comment">//因为这样做,只有第一个位置为1(机器表示为true),其他都为0;(*)</span></span><br></pre></td></tr></table></figure><p>memset和fill的用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用memset(要加头文件cstring,为一个赋值相同的元素0或者-1</span></span><br><span class="line"><span class="comment">//用法为memset(数组名,所要赋的值0,sizeof(数组名));</span></span><br><span class="line"><span class="built_in">memset</span>(forbid,<span class="number">0</span>,<span class="keyword">sizeof</span>(forbid));</span><br><span class="line"><span class="comment">//而如果要赋值其他的值(例如1)使用fill(要加头文件algorithm)</span></span><br><span class="line"><span class="comment">//fill可以把数组或容器中的某一段区间赋值为某个相同的值(这里的赋值可以是数组类型对应范围中的任意值)</span></span><br><span class="line"><span class="built_in">fill</span>(a,a+<span class="number">5</span>,<span class="number">233</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;fcin和cout(输入和输出)    &lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="c++" scheme="http://Likesleep.github.io/categories/c/"/>
    
      <category term="stl" scheme="http://Likesleep.github.io/categories/c/stl/"/>
    
    
      <category term="c++" scheme="http://Likesleep.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Typora常用快捷键</title>
    <link href="http://likesleep.github.io/2020/08/07/Typora%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://likesleep.github.io/2020/08/07/Typora%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2020-08-06T16:00:00.000Z</published>
    <updated>2020-08-07T13:55:50.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h3><h1 id="ctrl-1-一级标题-有分割线"><a href="#ctrl-1-一级标题-有分割线" class="headerlink" title="ctrl+1(一级标题)[有分割线]"></a>ctrl+1(一级标题)[有分割线]</h1><h2 id="ctrl-2-二级标题-有分割线"><a href="#ctrl-2-二级标题-有分割线" class="headerlink" title="ctrl+2(二级标题)[有分割线]"></a>ctrl+2(二级标题)[有分割线]</h2><p> ctrl+数字键(1~6)[标题]</p><hr><h3 id="编辑快捷键："><a href="#编辑快捷键：" class="headerlink" title="编辑快捷键："></a>编辑快捷键：</h3><p>ctrl+D(选中单词)</p><p>ctrl+L(选中当前行)</p><p>shift+home(当前行最前面)</p><p>shift+end(当前行最后面)</p><p>ctrl+E(选中当前格式文本)</p><p>ctrl+shift+D(删除当前词)</p><p>ctrl+F或者直接F3(查找)    F3(查找里的下一个)    shift+F3(查找里的上一个)</p><p>ctrl+H(替换)</p><hr><h3 id="段落快捷键"><a href="#段落快捷键" class="headerlink" title="段落快捷键:"></a>段落快捷键:</h3><p>ctrl+shift+[(有序列表)</p><p>ctrl+shift+](无序列表)</p><p>ctrl+shift+K(代码块)</p><p>ctrl+shift+M（公式块）</p><hr><h3 id="格式快捷键"><a href="#格式快捷键" class="headerlink" title="格式快捷键:"></a>格式快捷键:</h3><p>ctrl+shift+`(代码)    </p><p><code>this is a test</code></p><p> 插入代码块 ```+语言类型 (java、c++、c、python)</p><p>ctrl+shift+q(引用)</p><blockquote><p>这里是引用样例</p></blockquote><p>ctrl+U 测试（<strong>下划线</strong>）</p><p>alt+shift+S 删除线测试(<strong>删除线</strong>)</p><p>ctrl+B <strong>测试</strong>(<strong>字体加粗</strong>)</p><p>ctrl+I <em>测试</em>(<strong>字体倾斜</strong>)</p><p>ctrl+K(链接)    <a href="">www.baidu.com</a></p><p>ctrl+shift+I(插入图片)</p><p>ctrl+shift+L(显栏示侧边)</p><p>ctrl+shift+1(大纲视图)</p><p>ctrl+shift+2(文件列表视图)</p><p>ctrl+shift+3(文件树视图)</p><p>ctrl+shift+F(搜索文件)</p><p>ctrl+T(生成表格)  </p><table><thead><tr><th>表格测试</th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><hr><p>shift+tab(减少缩进)</p><p>tab(缩进)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c1,c2;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;c1,&amp;c2);</span><br><span class="line"></span><br><span class="line">i=c2-c1;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">100</span>&gt;=<span class="number">50</span>)&#123;</span><br><span class="line">i=i/<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">i=i/<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d::%02d::%02d\n"</span>,i/<span class="number">3600</span>,i%<span class="number">3600</span>/<span class="number">60</span>,i%<span class="number">60</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>—或者*** + enter(分割线)</p><hr><p>-+space(表示出小圆点)</p><hr><h3 id="无法使用："><a href="#无法使用：" class="headerlink" title="无法使用："></a>无法使用：</h3><p>x^2^</p><p>h<del>2</del>o</p><p>X2 H2O</p><p> x^2^   H<del>2</del>O(角标)</p><p> ==高亮== (高亮)</p><p>ctrl+home(到文章开头)</p><p>ctrl+end(到文章结尾)</p><h4 id="开启拓展后使用"><a href="#开启拓展后使用" class="headerlink" title="(开启拓展后使用)"></a>(开启拓展后使用)</h4><hr><p>复制到dev c++后自动排版(ctrl+shift+a)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;标题：&quot;&gt;&lt;a href=&quot;#标题：&quot; class=&quot;headerlink&quot; title=&quot;标题：&quot;&gt;&lt;/a&gt;标题：&lt;/h3&gt;&lt;h1 id=&quot;ctrl-1-一级标题-有分割线&quot;&gt;&lt;a href=&quot;#ctrl-1-一级标题-有分割线&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="typora" scheme="http://Likesleep.github.io/categories/typora/"/>
    
    
      <category term="typora" scheme="http://Likesleep.github.io/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>1073 多选题常见计分法</title>
    <link href="http://likesleep.github.io/2020/07/01/1073%20%E5%A4%9A%E9%80%89%E9%A2%98%E5%B8%B8%E8%A7%81%E8%AE%A1%E5%88%86%E6%B3%95/"/>
    <id>http://likesleep.github.io/2020/07/01/1073%20%E5%A4%9A%E9%80%89%E9%A2%98%E5%B8%B8%E8%A7%81%E8%AE%A1%E5%88%86%E6%B3%95/</id>
    <published>2020-07-01T04:01:25.338Z</published>
    <updated>2020-02-01T11:43:34.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到 50% 分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出两个正整数 N（≤1000）和 M（≤100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 <code>(选中的选项个数 选项1 ……)</code>，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后 1 位。最后输出错得最多的题目选项的信息，格式为：<code>错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号</code>。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 <code>Too simple</code>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3 4 </span><br><span class="line">3 4 2 a c</span><br><span class="line">2 5 1 b</span><br><span class="line">5 3 2 b c</span><br><span class="line">1 5 4 a b d e</span><br><span class="line">(2 a c) (3 b d e) (2 a c) (3 a b e)</span><br><span class="line">(2 a c) (1 b) (2 a b) (4 a b d e)</span><br><span class="line">(2 b d) (1 e) (1 c) (4 a b c d)</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3.5</span><br><span class="line">6.0</span><br><span class="line">2.5</span><br><span class="line">2 2-e</span><br><span class="line">2 3-a</span><br><span class="line">2 3-b</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2 2 </span><br><span class="line">3 4 2 a c</span><br><span class="line">2 5 1 b</span><br><span class="line">(2 a c) (1 b)</span><br><span class="line">(2 a c) (1 b)</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5.0</span><br><span class="line">5.0</span><br><span class="line">Too simple</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异或运算: ^(如果两个位值不同则为1,值同则为0)</span></span><br><span class="line"><span class="comment">//或运算: |(其中一个为1则为1)</span></span><br><span class="line"><span class="comment">//与运算: &amp;(同1为1,其余为0)</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hash[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">16</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;<span class="title">cnt</span><span class="params">(m,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>;j++)</span><br><span class="line"><span class="built_in">max</span> = <span class="built_in">max</span> &gt; cnt[i][j] ? <span class="built_in">max</span> : cnt[i][j];</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">double</span> sco = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">int</span> choose;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"(%d"</span>,&amp;choose);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; choose; k++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c"</span>,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(k == choose - <span class="number">1</span>)<span class="built_in">scanf</span>(<span class="string">")"</span>);</span><br><span class="line">stuOpt[i][j] += hash[c - <span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> el = stuOpt[i][j] ^ right[j];</span><br><span class="line"><span class="keyword">if</span>(el == <span class="number">0</span>)&#123;</span><br><span class="line">sco += fullScore[j];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((stuOpt[i][j] | right[j]) == right[j])</span><br><span class="line">sco += fullScore[j] * <span class="number">1.0</span> / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(el != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(el &amp; hash[k])cnt[j][k]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>,sco); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到 50% 分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>1090 危险品装箱</title>
    <link href="http://likesleep.github.io/2020/07/01/1090%20%E5%8D%B1%E9%99%A9%E5%93%81%E8%A3%85%E7%AE%B1/"/>
    <id>http://likesleep.github.io/2020/07/01/1090%20%E5%8D%B1%E9%99%A9%E5%93%81%E8%A3%85%E7%AE%B1/</id>
    <published>2020-07-01T04:01:25.325Z</published>
    <updated>2020-02-02T12:53:00.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。</p><p>本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出两个正整数：<em>N</em> (≤10^4^) 是成对的不相容物品的对数；<em>M</em> (≤100) 是集装箱货品清单的单数。</p><p>随后数据分两大块给出。第一块有 <em>N</em> 行，每行给出一对不相容的物品。第二块有 <em>M</em> 行，每行给出一箱货物的清单，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K G[1] G[2] ... G[K]</span><br></pre></td></tr></table></figure><p>其中 <code>K</code> (≤1000) 是物品件数，<code>G[i]</code> 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 <code>Yes</code>，否则输出 <code>No</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">20001 20002</span><br><span class="line">20003 20004</span><br><span class="line">20005 20006</span><br><span class="line">20003 20001</span><br><span class="line">20005 20004</span><br><span class="line">20004 20006</span><br><span class="line">4 00001 20004 00002 20003</span><br><span class="line">5 98823 20002 20003 20006 10010</span><br><span class="line">3 12345 67890 23333</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;mp;<span class="comment">//一个键对应的是一个数组值,也就是说一个键对应多个值</span></span><br><span class="line">mp[f1].push_back(f2);<span class="comment">//比如20001-&gt;20003,20001-&gt;20002,20001-&gt;20004</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//要注意的地方</span></span><br><span class="line"><span class="keyword">int</span> exist[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//这个的位置是在while(m--)循环里面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mp[v[i]].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mp[v[i]][j] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">        <span class="keyword">if</span>(judge[mp[v[i]][j]] == <span class="number">1</span>)flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。&lt;/p&gt;
&lt;p&gt;本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>1054 求平均值[字符串处理](重要)</title>
    <link href="http://likesleep.github.io/2020/06/30/1054%20%E6%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC[%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86](%E9%87%8D%E8%A6%81)/"/>
    <id>http://likesleep.github.io/2020/06/30/1054%20%E6%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC[%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86](%E9%87%8D%E8%A6%81)/</id>
    <published>2020-06-30T07:51:53.743Z</published>
    <updated>2020-01-11T13:29:04.516Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本题的基本要求非常简单：给定 <em>N</em> 个实数，计算它们的平均值。但复杂的是有些输入数据可能是非法的。一个“合法”的输入是 [−1000,1000] 区间内的实数，并且最多精确到小数点后 2 位。当你计算平均值的时候，不能把那些非法的数据算在内。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出正整数 <em>N</em>（≤100）。随后一行给出 <em>N</em> 个实数，数字间以一个空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个非法输入，在一行中输出 <code>ERROR: X is not a legal number</code>，其中 <code>X</code> 是输入。最后在一行中输出结果：<code>The average of K numbers is Y</code>，其中 <code>K</code> 是合法输入的个数，<code>Y</code> 是它们的平均值，精确到小数点后 2 位。如果平均值无法计算，则用 <code>Undefined</code> 替换 <code>Y</code>。如果 <code>K</code> 为 1，则输出 <code>The average of 1 number is Y</code>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">5 -3.2 aaa 9999 2.3.4 7.123 2.35</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR: aaa is not a legal number</span><br><span class="line">ERROR: 9999 is not a legal number</span><br><span class="line">ERROR: 2.3.4 is not a legal number</span><br><span class="line">ERROR: 7.123 is not a legal number</span><br><span class="line">The average of 3 numbers is 1.38</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">aaa -9999</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: aaa is not a legal number</span><br><span class="line">ERROR: -9999 is not a legal number</span><br><span class="line">The average of 0 numbers is Undefined</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sscanfhesprintf在头文件iostream中</span></span><br><span class="line"><span class="comment">//sscanf() – 从⼀个字符串中读进与指定格式相符的数据(s1,s2都是字符数组的首地址，不要用字符串string)</span></span><br><span class="line"><span class="comment">//sprintf() – 字符串格式化命令，主要功能是把格式化的数据写⼊某个字符串中</span></span><br><span class="line"><span class="comment">//对比cin&gt;&gt;n;cout&lt;&lt;n;</span></span><br><span class="line"><span class="comment">//还可以对比stringstream ss;ss&lt;&lt;s;ss&gt;&gt;print;</span></span><br><span class="line"><span class="built_in">sscanf</span>(s1,<span class="string">"%lf"</span>,&amp;temp);</span><br><span class="line"><span class="built_in">sprintf</span>(s2,<span class="string">"%.2lf"</span>,temp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//s1就是字符数组的首地址</span></span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">105</span>],s2[<span class="number">105</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)<span class="keyword">if</span>(s1[i]!=s2[i])isNum=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">105</span>],s2[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">double</span>temp,sum=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);</span><br><span class="line"><span class="built_in">sscanf</span>(s1,<span class="string">"%lf"</span>,&amp;temp);</span><br><span class="line"><span class="built_in">sprintf</span>(s2,<span class="string">"%.2lf"</span>,temp);</span><br><span class="line"><span class="keyword">int</span> len1=<span class="built_in">strlen</span>(s1);</span><br><span class="line"><span class="keyword">bool</span> isNum=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;s1&lt;&lt;" "&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)<span class="keyword">if</span>(s1[i]!=s2[i])isNum=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(isNum &amp;&amp; temp&gt;=<span class="number">-1000</span> &amp;&amp; temp&lt;=<span class="number">1000</span>)&#123;</span><br><span class="line">sum+=temp;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;<span class="keyword">else</span><span class="built_in">printf</span>(<span class="string">"ERROR: %s is not a legal number\n"</span>,s1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"The average of 0 numbers is Undefined"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"The average of 1 number is %.2f"</span>,sum);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"The average of %d numbers is %.2f"</span>,cnt,sum/cnt);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本题的基本要求非常简单：给定 &lt;em&gt;N&lt;/em&gt; 个实数，计算它们的平均值。但复杂的是有些输入数据可能是非法的。一个“合法”的输入是 [−1000,1000] 区间内的实数，并且最多精确到小数点后 2 位。当你计算平均值的时候，不能把那些非法的数
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>1048 数字加密</title>
    <link href="http://likesleep.github.io/2020/05/27/1048%20%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86[%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86](%E9%87%8D%E8%A6%81)/"/>
    <id>http://likesleep.github.io/2020/05/27/1048%20%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86[%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86](%E9%87%8D%E8%A6%81)/</id>
    <published>2020-05-26T16:00:00.000Z</published>
    <updated>2020-08-07T14:24:46.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出加密后的结果。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567 368782971</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3695Q8118</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不熟练的代码块</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">14</span>]=&#123;<span class="string">"0123456789JQK"</span>&#125;;</span><br><span class="line">reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(len1&gt;len2)s2.append(len1-len2,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">if</span>(len2&gt;len1) s1.append(len2-len1,<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">ans+=str[(s1[i]-<span class="string">'0'</span>+s2[i]-<span class="string">'0'</span>)%<span class="number">13</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">string</span> s1,s2;<span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">14</span>]=&#123;<span class="string">"0123456789JQK"</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> len1=s1.length();</span><br><span class="line"><span class="keyword">int</span> len2=s2.length();</span><br><span class="line"><span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">if</span>(len1&gt;len2)s2.append(len1-len2,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">if</span>(len2&gt;len1) s1.append(len2-len1,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">ans+=str[(s1[i]-<span class="string">'0'</span>+s2[i]-<span class="string">'0'</span>)%<span class="number">13</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> temp=s2[i]-s1[i];</span><br><span class="line"><span class="keyword">if</span>(temp&lt;<span class="number">0</span>)temp+=<span class="number">10</span>;</span><br><span class="line">ans+=str[temp];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">reverse(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> tmp:ans)<span class="built_in">cout</span>&lt;&lt;tmp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，
      
    
    </summary>
    
    
      <category term="PAT" scheme="http://Likesleep.github.io/categories/PAT/"/>
    
      <category term="basic" scheme="http://Likesleep.github.io/categories/PAT/basic/"/>
    
    
      <category term="c++" scheme="http://Likesleep.github.io/tags/c/"/>
    
      <category term="java" scheme="http://Likesleep.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>1045 快速排序</title>
    <link href="http://likesleep.github.io/2020/05/26/1045%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F[%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F](%E9%87%8D%E8%A6%81)/"/>
    <id>http://likesleep.github.io/2020/05/26/1045%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F[%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F](%E9%87%8D%E8%A6%81)/</id>
    <published>2020-05-25T16:00:00.000Z</published>
    <updated>2020-08-08T04:22:41.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 <em>N</em> 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？</p><p>例如给定 $N = 5$, 排列是1、3、2、4、5。则：</p><ul><li>1 的左边没有元素，右边的元素都比它大，所以它可能是主元；</li><li>尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；</li><li>尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；</li><li>类似原因，4 和 5 都可能是主元。</li></ul><p>因此，有 3 个元素可能是主元。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行中给出一个正整数 <em>N</em>（≤105）； 第 2 行是空格分隔的 <em>N</em> 个不同的正整数，每个数不超过 109。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 2 4 5</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 5</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主元特征:左边所有元素&lt;主元&lt;右边所有元素(等价于=&gt; 左边元素最大值&lt;主元&lt;右边元素最小值)</span></span><br><span class="line"><span class="comment">/*对原序列sort排序，逐个⽐较，当当前元素没有变化并且它左边的所有值的最⼤值都⽐它⼩的</span></span><br><span class="line"><span class="comment">时候就可以认为它⼀定是主元（很容易证明正确性的，毕竟⽆论如何当前这个数要满⾜左边都⽐他⼤</span></span><br><span class="line"><span class="comment">右边都⽐他⼩，那它的排名[当前数在序列中处在第⼏个]⼀定不会变）*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 &lt;em&gt;N&lt;/em&gt; 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的
      
    
    </summary>
    
    
      <category term="PAT" scheme="http://Likesleep.github.io/categories/PAT/"/>
    
      <category term="basic" scheme="http://Likesleep.github.io/categories/PAT/basic/"/>
    
    
      <category term="c++" scheme="http://Likesleep.github.io/tags/c/"/>
    
      <category term="c" scheme="http://Likesleep.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://likesleep.github.io/2020/02/21/hello-world/"/>
    <id>http://likesleep.github.io/2020/02/21/hello-world/</id>
    <published>2020-02-21T05:03:42.146Z</published>
    <updated>2020-06-30T14:21:17.181Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
